{
    "name": "vscode-gitflow",
    "displayName": "Git Flow",
    "description": "Git-Flow support for VS Code",
    "version": "1.3.9",
    "engines": {
        "vscode": "^1.64.0"
    },
    "publisher": "Serhioromano",
    "author": "Sergey Romanov",
    "preview": true,
    "keywords": [
        "git flow",
        "gitflow",
        "git-flow",
        "git",
        "flow",
        "github",
        "feature",
        "release",
        "bugfix",
        "bug fix",
        "hotfix",
        "hot fix",
        "support",
        "version",
        "versions",
        "versioning"
    ],
    "categories": [
        "Other",
        "SCM Providers"
    ],
    "icon": "icon.drawio.png",
    "activationEvents": [
        "workspaceContains:.git",
        "onCommand:gitflow.quickPick",
        "onView:gitflowExplorer",
        "onView:gitflowTags"
    ],
    "extensionDependencies": [
        "vscode.git",
        "vscode.git-base"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/Serhioromano/vscode-gitflow"
    },
    "homepage": "https://marketplace.visualstudio.com/items?itemName=serhioromano.vscode-gitflow",
    "contributes": {
        "configuration": {
            "title": "GitFlow",
            "properties": {
                "gitflow.showAllCommands": {
                    "type": "boolean",
                    "default": false,
                    "description": "Show all `git` commands that `git flow` runs in output window."
                },
                "gitflow.path": {
                    "type": "string",
                    "default": "",
                    "description": "Set you git-flow path manually"
                },
                "gitflow.autoBumpVersion": {
                    "type": "boolean",
                    "default": true,
                    "description": "Bump package version post start release/hotfix."
                }
            }
        },
        "keybindings": [
            {
                "command": "gitflow.quickPick",
                "key": "shift+alt+d",
                "when": "gitflow.initialized == true"
            }
        ],
        "commands": [
            {
                "command": "gitflow.switchRepo",
                "title": "Switch active repository",
                "category": "Git-Flow",
                "icon": "$(remote)"
            },
            {
                "command": "gitflow.checkoutBranch",
                "title": "Checkout",
                "category": "Git-Flow",
                "icon": "$(plug)"
            },
            {
                "command": "gitflow.quickPick",
                "title": "Quick Pick",
                "category": "Git-Flow",
                "icon": "$(extensions-rating)"
            },
            {
                "command": "gitflow.syncAll",
                "title": "Sync all root branches",
                "category": "Git-Flow",
                "icon": "$(repo-sync)"
            },
            {
                "command": "gitflow.refreshB",
                "title": "Refresh branches view",
                "category": "Git-Flow",
                "icon": "$(refresh)"
            },
            {
                "command": "gitflow.refreshT",
                "title": "Refresh versions view",
                "category": "Git-Flow",
                "icon": "$(refresh)"
            },
            {
                "command": "gitflow.pushTags",
                "title": "Push all tags to origin",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.pushTag",
                "title": "Push tag to origin",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.deleteTag",
                "title": "Delete tag",
                "category": "Git-Flow",
                "icon": "$(trash)"
            },
            {
                "command": "gitflow.fetchAllBranches",
                "title": "Fetch all remote branches",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.init",
                "title": "Init Git Flow",
                "category": "Git-Flow"
            },
            {
                "command": "gitflow.newSupport",
                "title": "Support - Start",
                "category": "Git-Flow",
                "icon": "$(debug-start)"
            },
            {
                "command": "gitflow.rebaseSupport",
                "title": "Support - Rebase",
                "category": "Git-Flow",
                "icon": "$(git-merge)"
            },
            {
                "command": "gitflow.publishSupport",
                "title": "Support - Publish",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.deleteSupport",
                "title": "Support - Delete",
                "category": "Git-Flow",
                "icon": "$(trash)"
            },
            {
                "command": "gitflow.checkoutSupport",
                "title": "Support - Checkout",
                "category": "Git-Flow",
                "icon": "$(plug)"
            },
            {
                "command": "gitflow.newFeature",
                "title": "Feature - Start",
                "category": "Git-Flow",
                "icon": "$(debug-start)"
            },
            {
                "command": "gitflow.trackFeature",
                "title": "Feature - Track",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.checkoutFeature",
                "title": "Feature - Checkout",
                "category": "Git-Flow",
                "icon": "$(plug)"
            },
            {
                "command": "gitflow.finishFeature",
                "title": "Feature - Finish",
                "category": "Git-Flow",
                "icon": "$(debug-stop)"
            },
            {
                "command": "gitflow.publishFeature",
                "title": "Feature - Publish",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.rebaseFeature",
                "title": "Feature - Rebase",
                "category": "Git-Flow",
                "icon": "$(git-merge)"
            },
            {
                "command": "gitflow.deleteFeature",
                "title": "Feature - Delete",
                "category": "Git-Flow",
                "icon": "$(trash)"
            },
            {
                "command": "gitflow.newRelease",
                "title": "Release - Start",
                "category": "Git-Flow",
                "icon": "$(debug-start)"
            },
            {
                "command": "gitflow.trackRelease",
                "title": "Release - Track",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.checkoutRelease",
                "title": "Release - Checkout",
                "category": "Git-Flow",
                "icon": "$(plug)"
            },
            {
                "command": "gitflow.publishRelease",
                "title": "Release - Publish",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.deleteRelease",
                "title": "Release - Delete",
                "category": "Git-Flow",
                "icon": "$(trash)"
            },
            {
                "command": "gitflow.finishRelease",
                "title": "Release - Finish",
                "category": "Git-Flow",
                "icon": "$(debug-stop)"
            },
            {
                "command": "gitflow.rebaseRelease",
                "title": "Release - Rebase",
                "category": "Git-Flow",
                "icon": "$(git-merge)"
            },
            {
                "command": "gitflow.newHotfix",
                "title": "Hotfix - Start",
                "category": "Git-Flow",
                "icon": "$(debug-start)"
            },
            {
                "command": "gitflow.finishHotfix",
                "title": "Hotfix - Finish",
                "category": "Git-Flow",
                "icon": "$(debug-stop)"
            },
            {
                "command": "gitflow.publishHotfix",
                "title": "Hotfix - Publish",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.deleteHotfix",
                "title": "Hotfix - Delete",
                "category": "Git-Flow",
                "icon": "$(trash)"
            },
            {
                "command": "gitflow.rebaseHotfix",
                "title": "Hotfix - Rebase",
                "category": "Git-Flow",
                "icon": "$(git-merge)"
            },
            {
                "command": "gitflow.checkoutHotfix",
                "title": "Hotfix - Checkout",
                "category": "Git-Flow",
                "icon": "$(plug)"
            },
            {
                "command": "gitflow.newBugfix",
                "title": "Bugfix - Start",
                "category": "Git-Flow",
                "icon": "$(debug-start)"
            },
            {
                "command": "gitflow.trackBugfix",
                "title": "Bugfix - Track",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.checkoutBugfix",
                "title": "Bugfix - Checkout",
                "category": "Git-Flow",
                "icon": "$(plug)"
            },
            {
                "command": "gitflow.finishBugfix",
                "title": "Bugfix - Finish",
                "category": "Git-Flow",
                "icon": "$(debug-stop)"
            },
            {
                "command": "gitflow.publishBugfix",
                "title": "Bugfix - Publish",
                "category": "Git-Flow",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitflow.deleteBugfix",
                "title": "Bugfix - Delete",
                "category": "Git-Flow",
                "icon": "$(trash)"
            },
            {
                "command": "gitflow.rebaseBugfix",
                "title": "Bugfix - Rebase",
                "category": "Git-Flow",
                "icon": "$(git-merge)"
            }
        ],
        "views": {
            "scm": [
                {
                    "id": "gitflowExplorer",
                    "name": "Gitflow"
                },
                {
                    "id": "gitflowTags",
                    "name": "Versions"
                }
            ]
        },
        "menus": {
            "view/title": [
                {
                    "command": "gitflow.refreshT",
                    "when": "view == gitflowTags",
                    "group": "navigation"
                },
                {
                    "command": "gitflow.pushTags",
                    "when": "view == gitflowTags",
                    "group": "navigation"
                },
                {
                    "command": "gitflow.refreshB",
                    "when": "view == gitflowExplorer",
                    "group": "navigation"
                },
                {
                    "command": "gitflow.fetchAllBranches",
                    "when": "view == gitflowExplorer",
                    "group": "navigation"
                },
                {
                    "command": "gitflow.switchRepo",
                    "when": "view == gitflowExplorer && workspaceFolderCount > 1",
                    "group": "navigation"
                },
                {
                    "command": "gitflow.syncAll",
                    "when": "view == gitflowExplorer",
                    "group": "navigation"
                },
                {
                    "command": "gitflow.switchRepo",
                    "when": "view == gitflowExplorer && workspaceFolderCount > 1",
                    "group": "a_group@1"
                },
                {
                    "command": "gitflow.syncAll",
                    "when": "view == gitflowExplorer",
                    "group": "b_group@1"
                },
                {
                    "command": "gitflow.refreshB",
                    "when": "view == gitflowExplorer",
                    "group": "b_group@3"
                },
                {
                    "command": "gitflow.fetchAllBranches",
                    "when": "view == gitflowExplorer",
                    "group": "b_group@4"
                },
                {
                    "command": "gitflow.init",
                    "when": "view == gitflowExplorer",
                    "group": "b_group@5"
                },
                {
                    "command": "gitflow.newRelease",
                    "when": "view == gitflowExplorer",
                    "group": "c_group@6"
                },
                {
                    "command": "gitflow.newFeature",
                    "when": "view == gitflowExplorer",
                    "group": "c_group@7"
                },
                {
                    "command": "gitflow.newBugfix",
                    "when": "view == gitflowExplorer",
                    "group": "c_group@8"
                },
                {
                    "command": "gitflow.newHotfix",
                    "when": "view == gitflowExplorer",
                    "group": "c_group@9"
                }
            ],
            "view/item/context": [
                {
                    "command": "gitflow.pushTag",
                    "when": "view == gitflowTags && viewItem == local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.deleteTag",
                    "when": "view == gitflowTags",
                    "group": "inline"
                },
                {
                    "command": "gitflow.checkoutBranch",
                    "when": "view == gitflowExplorer && viewItem == branch",
                    "group": "inline"
                },
                {
                    "command": "gitflow.checkoutBranch",
                    "when": "view == gitflowExplorer && viewItem == branch"
                },
                {
                    "command": "gitflow.newFeature",
                    "when": "view == gitflowExplorer && viewItem == f"
                },
                {
                    "command": "gitflow.newRelease",
                    "when": "view == gitflowExplorer && viewItem == r"
                },
                {
                    "command": "gitflow.newHotfix",
                    "when": "view == gitflowExplorer && viewItem == h"
                },
                {
                    "command": "gitflow.newBugfix",
                    "when": "view == gitflowExplorer && viewItem == b"
                },
                {
                    "command": "gitflow.newSupport",
                    "when": "view == gitflowExplorer && viewItem == s"
                },
                {
                    "command": "gitflow.newFeature",
                    "when": "view == gitflowExplorer && viewItem == f",
                    "group": "inline"
                },
                {
                    "command": "gitflow.newRelease",
                    "when": "view == gitflowExplorer && viewItem == r",
                    "group": "inline"
                },
                {
                    "command": "gitflow.newHotfix",
                    "when": "view == gitflowExplorer && viewItem == h",
                    "group": "inline"
                },
                {
                    "command": "gitflow.newBugfix",
                    "when": "view == gitflowExplorer && viewItem == b",
                    "group": "inline"
                },
                {
                    "command": "gitflow.newSupport",
                    "when": "view == gitflowExplorer && viewItem == s",
                    "group": "inline"
                },
                {
                    "command": "gitflow.trackFeature",
                    "when": "view == gitflowExplorer && viewItem == origin_feature"
                },
                {
                    "command": "gitflow.trackFeature",
                    "when": "view == gitflowExplorer && viewItem == origin_feature",
                    "group": "inline"
                },
                {
                    "command": "gitflow.trackRelease",
                    "when": "view == gitflowExplorer && viewItem == origin_release"
                },
                {
                    "command": "gitflow.trackRelease",
                    "when": "view == gitflowExplorer && viewItem == origin_release",
                    "group": "inline"
                },
                {
                    "command": "gitflow.trackBugfix",
                    "when": "view == gitflowExplorer && viewItem == origin_bugfix"
                },
                {
                    "command": "gitflow.trackBugfix",
                    "when": "view == gitflowExplorer && viewItem == origin_bugfix",
                    "group": "inline"
                },
                {
                    "command": "gitflow.rebaseSupport",
                    "when": "view == gitflowExplorer && viewItem == support ||  viewItem == support_local"
                },
                {
                    "command": "gitflow.rebaseSupport",
                    "when": "view == gitflowExplorer && viewItem == support ||  viewItem == support_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.deleteSupport",
                    "when": "view == gitflowExplorer && viewItem == support ||  viewItem == support_local"
                },
                {
                    "command": "gitflow.deleteSupport",
                    "when": "view == gitflowExplorer && viewItem == support ||  viewItem == support_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.checkoutSupport",
                    "when": "view == gitflowExplorer && viewItem == support || viewItem == support_local"
                },
                {
                    "command": "gitflow.checkoutSupport",
                    "when": "view == gitflowExplorer && viewItem == support || viewItem == support_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.publishSupport",
                    "when": "view == gitflowExplorer && viewItem == support_local"
                },
                {
                    "command": "gitflow.publishSupport",
                    "when": "view == gitflowExplorer && viewItem == support_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.publishHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix_local"
                },
                {
                    "command": "gitflow.rebaseHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local"
                },
                {
                    "command": "gitflow.finishHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local"
                },
                {
                    "command": "gitflow.deleteHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local"
                },
                {
                    "command": "gitflow.checkoutHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local"
                },
                {
                    "command": "gitflow.publishHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.rebaseHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.finishHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.deleteHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.checkoutHotfix",
                    "when": "view == gitflowExplorer && viewItem == hotfix ||  viewItem == hotfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.publishFeature",
                    "when": "view == gitflowExplorer && viewItem == feature_local"
                },
                {
                    "command": "gitflow.checkoutFeature",
                    "when": "view == gitflowExplorer && viewItem == feature || viewItem == feature_local"
                },
                {
                    "command": "gitflow.rebaseFeature",
                    "when": "view == gitflowExplorer && viewItem == feature ||  viewItem == feature_local"
                },
                {
                    "command": "gitflow.finishFeature",
                    "when": "view == gitflowExplorer && viewItem == feature ||  viewItem == feature_local"
                },
                {
                    "command": "gitflow.deleteFeature",
                    "when": "view == gitflowExplorer && viewItem == feature ||  viewItem == feature_local"
                },
                {
                    "command": "gitflow.publishFeature",
                    "when": "view == gitflowExplorer && viewItem == feature_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.checkoutFeature",
                    "when": "view == gitflowExplorer && viewItem == feature || viewItem == feature_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.rebaseFeature",
                    "when": "view == gitflowExplorer && viewItem == feature ||  viewItem == feature_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.finishFeature",
                    "when": "view == gitflowExplorer && viewItem == feature ||  viewItem == feature_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.deleteFeature",
                    "when": "view == gitflowExplorer && viewItem == feature ||  viewItem == feature_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.publishBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix_local"
                },
                {
                    "command": "gitflow.checkoutBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix || viewItem == bugfix_local"
                },
                {
                    "command": "gitflow.rebaseBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix ||  viewItem == bugfix_local"
                },
                {
                    "command": "gitflow.finishBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix ||  viewItem == bugfix_local"
                },
                {
                    "command": "gitflow.deleteBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix ||  viewItem == bugfix_local"
                },
                {
                    "command": "gitflow.publishBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.checkoutBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix || viewItem == bugfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.rebaseBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix ||  viewItem == bugfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.finishBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix ||  viewItem == bugfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.deleteBugfix",
                    "when": "view == gitflowExplorer && viewItem == bugfix ||  viewItem == bugfix_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.publishRelease",
                    "when": "view == gitflowExplorer && viewItem == release_local"
                },
                {
                    "command": "gitflow.rebaseRelease",
                    "when": "view == gitflowExplorer && viewItem == release_local"
                },
                {
                    "command": "gitflow.finishRelease",
                    "when": "view == gitflowExplorer && viewItem == release ||  viewItem == release_local"
                },
                {
                    "command": "gitflow.deleteRelease",
                    "when": "view == gitflowExplorer && viewItem == release ||  viewItem == release_local"
                },
                {
                    "command": "gitflow.checkoutRelease",
                    "when": "view == gitflowExplorer && viewItem == release ||  viewItem == release_local"
                },
                {
                    "command": "gitflow.publishRelease",
                    "when": "view == gitflowExplorer && viewItem == release_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.rebaseRelease",
                    "when": "view == gitflowExplorer && viewItem == release_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.finishRelease",
                    "when": "view == gitflowExplorer && viewItem == release ||  viewItem == release_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.checkoutRelease",
                    "when": "view == gitflowExplorer && viewItem == release ||  viewItem == release_local",
                    "group": "inline"
                },
                {
                    "command": "gitflow.deleteRelease",
                    "when": "view == gitflowExplorer && viewItem == release ||  viewItem == release_local",
                    "group": "inline"
                }
            ]
        }
    },
    "main": "./out/main.js",
    "_main": "./out/extension.js",
    "scripts": {
        "vscode:prepublish": "npm run esbuild-base -- --minify",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node",
        "esbuild": "npm run esbuild-base -- --sourcemap",
        "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
        "watch": "tsc -watch -p ./",
        "publish": "vsce package && gh release create $(node -pe \"require('./package.json')['version']\") --generate-notes \"./vscode-gitflow-$(node -pe \"require('./package.json')['version']\").vsix\" && vsce publish",
        "_vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "vars": "env | grep npm_package_",
        "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
        "@types/glob": "^7.2.0",
        "@types/mocha": "^9.0.0",
        "@types/node": "14.x",
        "@types/vscode": "^1.64.0",
        "@typescript-eslint/eslint-plugin": "^5.9.1",
        "@typescript-eslint/parser": "^5.9.1",
        "@vscode/test-electron": "^2.0.3",
        "esbuild": "^0.14.10",
        "eslint": "^8.6.0",
        "glob": "^7.2.0",
        "mocha": "^9.1.3",
        "typescript": "^4.6.3",
        "vsce": "^2.6.4"
    },
    "dependencies": {
        "semver": "^7.3.5",
        "typescript-memoize": "^1.1.0"
    }
}
